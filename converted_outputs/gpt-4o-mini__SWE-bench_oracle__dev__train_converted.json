[
  {
    "instance_id": "pvlib__pvlib-python-1764",
    "model_patch": "--- a/pvlib/singlediode.py\n+++ b/pvlib/singlediode.py\n@@ -12,7 +12,8 @@\n \n # set keyword arguments for all uses of newton in this module\n-newton = partial(newton, tol=1e-6, maxiter=100, fprime2=None)\n+newton_default = partial(newton, tol=1e-6, maxiter=100, fprime2=None)\n+\n \n def estimate_voc(photocurrent, saturation_current, nNsVth):\n     \"\"\"\n@@ -204,7 +205,7 @@\n def bishop88_mpp(photocurrent, saturation_current, resistance_series,\n                  resistance_shunt, nNsVth, d2mutau=0, NsVbi=np.Inf,\n                  breakdown_factor=0., breakdown_voltage=-5.5,\n-                 breakdown_exp=3.28, method='newton'):\n+                 breakdown_exp=3.28, method='newton', tol=1e-6, maxiter=100):\n     \"\"\"\n     Find max power point.\n \n@@ -430,7 +431,7 @@\n     if method.lower() == 'brentq':\n         # break out arguments for numpy.vectorize to handle broadcasting\n         vec_fun = np.vectorize(\n-             lambda voc, iph, isat, rs, rsh, gamma, d2mutau, NsVbi, vbr_a, vbr,\n+             lambda voc, iph, isat, rs, rsh, gamma, d2mutau, NsVbi, vbr_a, vbr, vbr_exp: \n              brentq(fmpp, 0.0, voc,\n                      args=(iph, isat, rs, rsh, gamma, d2mutau, NsVbi,\n                            vbr_a, vbr, vbr_exp))\n@@ -451,7 +452\n         args, v0 = _prepare_newton_inputs((), args, voc_est)\n         vd = newton(\n-             func=fmpp, x0=v0,\n+             func=fmpp, x0=v0, \n              fprime=lambda x, *a: bishop88(x, *a, gradients=True)[7], args=args,\n+             tol=tol, maxiter=maxiter\n         )\n     else:\n         raise NotImplementedError(\"Method '%s' isn't implemented\" % method)\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pvlib__pvlib-python-1480",
    "model_patch": "--- a/pvlib/tracking.py\n+++ b/pvlib/tracking.py\n@@ -528,6 +528,35 @@\n     return out\n+    \n+def rotation_to_orientation(tracker_theta, axis_tilt=0, axis_azimuth=0):\n+    \"\"\"\n+    Convert tracker rotation angle to surface tilt and azimuth.\n+\n+    Parameters\n+    ----------\n+    tracker_theta : float or array-like\n+        The rotation angle of the tracker. tracker_theta = 0 is horizontal.\n+\n+    axis_tilt : float, default 0\n+        The tilt of the axis of rotation with respect to horizontal, in decimal degrees.\n+\n+    axis_azimuth : float, default 0\n+        A value denoting the compass direction along which the axis of rotation lies.\n+\n+    Returns\n+    -------\n+    dict\n+        A dictionary containing 'surface_tilt' and 'surface_azimuth'.\n+    \"\"\"\n+\n+    # Calculate panel normal vector in panel-oriented x, y, z coordinates.\n+    panel_norm = np.array([sind(tracker_theta),\n+                           tracker_theta*0,\n+                           cosd(tracker_theta)])\n+\n+    # Calculate panel tilt and azimuth in a coordinate system where the panel\n+    # tilt is the angle from horizontal, and the panel azimuth is the compass\n+    # angle to the projection of the panel's normal to the earth's surface.\n+\n+    # Calculate standard rotation matrix\n+    rot_x = np.array([[1, 0, 0],\n+                      [0, cosd(-axis_tilt), -sind(-axis_tilt)],\n+                      [0, sind(-axis_tilt), cosd(-axis_tilt)]])\n+\n+    # panel_norm_earth contains the normal vector expressed in earth-surface\n+    # coordinates (z normal to surface, y aligned with tracker axis parallel to\n+    # earth)\n+    panel_norm_earth = np.dot(rot_x, panel_norm).T\n+\n+    # projection to plane tangent to earth surface, in earth surface\n+    # coordinates\n+    projected_normal = np.array([panel_norm_earth[:, 0],\n+                                 panel_norm_earth[:, 1],\n+                                 panel_norm_earth[:, 2]*0]).T\n+\n+    # calculate vector magnitudes\n+    projected_normal_mag = np.sqrt(np.nansum(projected_normal**2, axis=1))\n+\n+    # renormalize the projected vector, avoid creating nan values.\n+    non_zeros = projected_normal_mag != 0\n+    projected_normal[non_zeros] = (projected_normal[non_zeros].T /\n+                                    projected_normal_mag[non_zeros]).T\n+\n+    # calculation of surface_azimuth\n+    surface_azimuth = \\\n+        np.degrees(np.arctan2(projected_normal[:, 1], projected_normal[:, 0]))\n+\n+    # Rotate 0 reference from panel's x-axis to its y-axis and then back to\n+    # north.\n+    surface_azimuth = 90 - surface_azimuth + axis_azimuth\n+\n+    # Map azimuth into [0,360) domain.\n+    surface_azimuth = surface_azimuth % 360\n+\n+    # Calculate surface_tilt\n+    dotproduct = (panel_norm_earth * projected_normal).sum(axis=1)\n+    dotproduct = np.clip(dotproduct, -1, 1)\n+    surface_tilt = 90 - np.degrees(np.arccos(dotproduct))\n+\n+    return {'surface_tilt': surface_tilt, 'surface_azimuth': surface_azimuth}\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pvlib__pvlib-python-1653",
    "model_patch": "--- a/pvlib/snow.py\n+++ b/pvlib/snow.py\n@@ -293,12 +293,15 @@\n     lower_edge_height_clipped = np.maximum(lower_edge_height, 0.01)\n     gamma = (\n         slant_height\n         * effective_snow_weighted_m\n-        * cosd(surface_tilt)\n-        / (lower_edge_height_clipped**2 - effective_snow_weighted_m**2)\n+        * cosd(surface_tilt) \n+        / np.maximum(lower_edge_height_clipped**2 - effective_snow_weighted_m**2, 0.01)\n         * 2\n         * tand(angle_of_repose)\n     )\n \n     ground_interference_term = 1 - C2 * np.exp(-gamma)\n \n     # Convert units from cm/m to inches earlier in the process\n-    effective_snow_weighted_in = effective_snow_weighted / 2.54\n+    effective_snow_weighted_in = effective_snow_weighted * 0.393701  # cm to inches\n     poa_global_kWh = poa_global / 1000\n \n     # Calculate Eqn. 3 in the reference.\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pvlib__pvlib-python-763",
    "model_patch": "--- a/pvlib/pvsystem.py\n+++ b/pvlib/pvsystem.py\n@@ -317,6 +317,8 @@\n     def calcparams_desoto(self, effective_irradiance, temp_cell, **kwargs):\n         \"\"\"\n         Use the :py:func:`calcparams_desoto` function, the input\n         parameters and ``self.module_parameters`` to calculate the\n         module currents and resistances.\n \n         Parameters\n         ----------\n         effective_irradiance : numeric\n         ...\n         **kwargs\n         See pvsystem.calcparams_desoto for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         See pvsystem.calcparams_desoto for details\n         \"\"\"\n         kwargs = _build_kwargs(['a_ref', 'I_L_ref', 'I_o_ref', 'R_sh_ref',\n                                 'R_s', 'alpha_sc', 'EgRef', 'dEgdT',\n                                 'irrad_ref', 'temp_ref', 'recombination_current'],\n                                self.module_parameters)\n \n         return calcparams_desoto(effective_irradiance, temp_cell, **kwargs)\n \n@@ -346,6 +348,8 @@\n     def calcparams_cec(self, effective_irradiance, temp_cell, **kwargs):\n         \"\"\"\n         Use the :py:func:`calcparams_cec` function, the input\n         parameters and ``self.module_parameters`` to calculate the\n         module currents and resistances.\n \n         Parameters\n         ----------\n         effective_irradiance : numeric\n         ...\n         **kwargs\n         See pvsystem.calcparams_cec for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         See pvsystem.calcparams_cec for details\n         \"\"\"\n         kwargs = _build_kwargs(['a_ref', 'I_L_ref', 'I_o_ref', 'R_sh_ref',\n                                 'R_s', 'alpha_sc', 'Adjust', 'EgRef', 'dEgdT',\n                                 'irrad_ref', 'temp_ref', 'recombination_current'],\n                                self.module_parameters)\n \n         return calcparams_cec(effective_irradiance, temp_cell, **kwargs)\n \n@@ -375,6 +379,8 @@\n     def calcparams_pvsyst(self, effective_irradiance, temp_cell, **kwargs):\n         \"\"\"\n         Use the :py:func:`calcparams_pvsyst` function, the input\n         parameters and ``self.module_parameters`` to calculate the\n         module currents and resistances.\n \n         Parameters\n         ----------\n         effective_irradiance : numeric\n         ...\n         **kwargs\n         See pvsystem.calcparams_pvsyst for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         See pvsystem.calcparams_pvsyst for details\n         \"\"\"\n         kwargs = _build_kwargs(['gamma_ref', 'mu_gamma', 'I_L_ref', 'I_o_ref',\n                                 'R_sh_ref', 'R_sh_0', 'R_sh_exp',\n                                 'R_s', 'alpha_sc', 'EgRef',\n                                 'irrad_ref', 'temp_ref',\n                                 'cells_in_series', 'recombination_current'],\n                                self.module_parameters)\n \n         return calcparams_pvsyst(effective_irradiance, temp_cell, **kwargs)\n \n@@ -403,6 +409,8 @@\n     def sapm(self, effective_irradiance, temp_cell, **kwargs):\n         \"\"\"\n         Use the :py:func:`sapm` function, the input parameters,\n         and ``self.module_parameters`` to calculate\n         Voc, Isc, Ix, Ixx, Vmp/Imp.\n \n         Parameters\n         ----------\n         effective_irradiance : numeric\n         ...\n         **kwargs\n         See pvsystem.sapm for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         See pvsystem.sapm for details\n         \"\"\"\n         return sapm(effective_irradiance, temp_cell, self.module_parameters, **kwargs)\n \n@@ -433,6 +441,8 @@\n     def sapm_celltemp(self, irrad, wind, temp, **kwargs):\n         \"\"\"Uses :py:func:`sapm_celltemp` to calculate module and cell\n         temperatures based on ``self.racking_model`` and\n         the input parameters.\n \n         Parameters\n         ----------\n         See pvsystem.sapm_celltemp for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         See pvsystem.sapm_celltemp for details\n         \"\"\"\n         return sapm_celltemp(irrad, wind, temp, self.racking_model, **kwargs)\n \n@@ -450,6 +460,8 @@\n     def sapm_spectral_loss(self, airmass_absolute, **kwargs):\n         \"\"\"\n         Use the :py:func:`sapm_spectral_loss` function, the input\n         parameters, and ``self.module_parameters`` to calculate F1.\n \n         Parameters\n         ----------\n         airmass_absolute : numeric\n         ...\n         **kwargs\n         See pvsystem.sapm_spectral_loss for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         F1 : numeric\n             The SAPM spectral loss coefficient.\n         \"\"\"\n         return sapm_spectral_loss(airmass_absolute, self.module_parameters, **kwargs)\n \n@@ -467,6 +479,8 @@\n     def sapm_aoi_loss(self, aoi, **kwargs):\n         \"\"\"\n         Use the :py:func:`sapm_aoi_loss` function, the input parameters,\n         and ``self.module_parameters`` to calculate F2.\n \n         Parameters\n         ----------\n         aoi : numeric\n         ...\n         **kwargs\n         See pvsystem.sapm_aoi_loss for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         F2 : numeric\n             The SAPM angle of incidence loss coefficient.\n         \"\"\"\n         return sapm_aoi_loss(aoi, self.module_parameters, **kwargs)\n \n@@ -484,6 +498,8 @@\n     def sapm_effective_irradiance(self, poa_direct, poa_diffuse,\n                                   airmass_absolute, aoi, **kwargs):\n         \"\"\"\n         Use the :py:func:`sapm_effective_irradiance` function, the input\n         parameters, and ``self.module_parameters`` to calculate\n         effective irradiance.\n \n         Parameters\n         ----------\n         poa_direct : numeric\n         ...\n         **kwargs\n         See pvsystem.sapm_effective_irradiance for details\n         +    recombination_current: numeric, optional\n         +        Recombination current parameter for the model.\n \n         Returns\n         -------\n         effective_irradiance : numeric\n             The SAPM effective irradiance.\n         \"\"\"\n         return sapm_effective_irradiance(\n             poa_direct, poa_diffuse, airmass_absolute, aoi,\n             self.module_parameters, **kwargs)\n \n--- a/pvlib/singlediode.py\n+++ b/pvlib/singlediode.py\n@@ -72,6 +72,8 @@\n              d2mutau=0, NsVbi=np.Inf, gradients=False):\n     \"\"\"\n     Explicit calculation of points on the IV curve described by the single\n     diode equation [1]_.\n \n     ...\n     d2mutau : numeric\n         PVSyst thin-film recombination parameter that is the ratio of thickness\n         of the intrinsic layer squared :math:`d^2` and the diffusion length of\n         charge carriers :math:`\\\\mu \\\\tau`, in volts [V], defaults to 0[V]\n     +    recombination_current: numeric, optional\n     +        Recombination current parameter for the model.\n \n     Returns\n     -------\n     ...\n     \"\"\"\n     # calculate recombination loss current where d2mutau > 0\n     is_recomb = d2mutau > 0  # True where there is thin-film recombination loss\n     v_recomb = np.where(is_recomb, NsVbi - diode_voltage, np.inf)\n     i_recomb = np.where(is_recomb, photocurrent * d2mutau / v_recomb, 0)\n     # calculate temporary values to simplify calculations\n     ...\n     return retval\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pvlib__pvlib-python-1218",
    "model_patch": "--- a/pvlib/pvsystem.py\n+++ b/pvlib/pvsystem.py\n@@ -846,7 +846,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1150,7 +1150,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1185,7 +1185,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1220,7 +1220,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1255,7 +1255,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1290,7 +1290,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1325,7 +1325,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1350,7 +1350,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1385,7 +1385,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1410,7 +1410,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1435,7 +1435,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1460,7 +1460,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1485,7 +1485,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1510,7 +1510,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1535,7 +1535,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1560,7 +1560,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1585,7 +1585,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1610,7 +1610,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1635,7 +1635,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1660,7 +1660,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1685,7 +1685,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1710,7 +1710,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1735,7 +1735,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1760,7 +1760,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1785,7 +1785,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1810,7 +1810,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1835,7 +1835,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1860,7 +1860,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1885,7 +1885,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1910,7 +1910,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1935,7 +1935,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1960,7 +1960,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n@@ -1985,7 +1985,7 @@\n \n     Returns\n     -------\n-    numeric, values in degrees C.\n+    numeric, values in degrees Celsius.\n \n     Notes\n     -----\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pylint-dev__astroid-1962",
    "model_patch": "--- a/astroid/raw_building.py\n+++ b/astroid/raw_building.py\n@@ -283,7 +283,7 @@\n         # limit the instantiation trick since it's too dangerous\n         # (such as infinite test execution...)\n         # this at least resolves common case such as Exception.args,\n         # OSError.errno\n-        if issubclass(member, Exception):\n+        if isinstance(member, type) and issubclass(member, Exception):\n             instdict = member().__dict__\n         else:\n             raise TypeError\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pylint-dev__astroid-1719",
    "model_patch": "diff --git a/astroid/raw_building.py b/astroid/raw_building.py\nindex 4c1e9d2..b1e4c3a 100644\n--- a/astroid/raw_building.py\n+++ b/astroid/raw_building.py\n@@ -390,390 +390,390 @@\n                     warnings.simplefilter(\"error\")\n                     member = getattr(obj, name)\n+                    # Ignore FutureWarnings to prevent AstroidError\n+                    warnings.simplefilter(\"ignore\", FutureWarning)\n             except (AttributeError, DeprecationWarning):\n                 # damned ExtensionClass.Base, I know you're there !\n                 attach_dummy_node(node, name)\n                 continue\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pylint-dev__astroid-1903",
    "model_patch": "--- a/astroid/brain/brain_builtin_inference.py\n+++ b/astroid/brain/brain_builtin_inference.py\n@@ -925,6 +925,16 @@\n     return iter([nodes.const_factory(formatted_string)])\n \n+    # Check for non-existent attributes in format string\n+    for pos_value in pos_values:\n+        if not hasattr(daniel_age, 'name'):\n+            raise AstroidTypeError(f\"Invalid attribute access in format: {pos_value}\")\n+\n+    for key, value in keyword_values.items():\n+        if not hasattr(daniel_age, key):\n+            raise AstroidTypeError(f\"Invalid attribute access in format: {key}\")\n+\n+\n # Builtins inference\n register_builtin_transform(infer_bool, \"bool\")\n register_builtin_transform(infer_super, \"super\")\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pylint-dev__astroid-2309",
    "model_patch": "--- a/astroid/brain/brain_typing.py\n+++ b/astroid/brain/brain_typing.py\n@@ -177,6 +177,12 @@\n     if isinstance(value, ClassDef) and value.qname() in {\n         \"typing.Generic\",\n         \"typing.Annotated\",\n+        \"collections.abc.Mapping\",  # Added support for Mapping\n+        \"collections.abc.MutableMapping\",  # Added support for MutableMapping\n+        \"collections.abc.MappingView\",  # Added support for MappingView\n+        \"collections.abc.KeysView\",  # Added support for KeysView\n+        \"collections.abc.ItemsView\",  # Added support for ItemsView\n+        \"collections.abc.ValuesView\",  # Added support for ValuesView\n     }:\n         # typing.Generic and typing.Annotated (PY39) are subscriptable\n         # through __class_getitem__. Since astroid can't easily\n@@ -199,6 +205,7 @@\n     return node.infer(context=ctx)\n \n def _looks_like_typedDict(  # pylint: disable=invalid-name\n+    node: FunctionDef | ClassDef,\n ) -> bool:\n     \"\"\"Check if node is TypedDict FunctionDef.\"\"\"\n     return node.qname() in TYPING_TYPEDDICT_QUALIFIED\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pylint-dev__astroid-1262",
    "model_patch": "--- a/astroid/nodes/scoped_nodes.py\n+++ b/astroid/nodes/scoped_nodes.py\n@@ -474,6 +474,10 @@\n     parent: None\n     \n     def __init__(\n+        self,\n+        lineno=None,\n+        col_offset=None,\n+        end_lineno=None,\n+        end_col_offset=None,\n         name,\n         doc,\n         file=None,\n@@ -518,6 +522,10 @@\n         self.body = []\n         \"\"\"The contents of the module.\n \n         :type: list(NodeNG) or None\n         \"\"\"\n+        self.end_lineno = end_lineno\n+        self.end_col_offset = end_col_offset\n+\n     def postinit(self, body=None):\n         \"\"\"Do some setup after initialisation.\n \n@@ -564,6 +572,10 @@\n         return self.fromlineno, self.tolineno\n     \n     def scope_lookup(self, node, name, offset=0):\n+        \"\"\"Lookup where the given variable is assigned.\n+        \n+        :param node: The node to look for assignments up to.\n+            Any assignments after the given node are ignored.\n+        :type node: NodeNG\n+        \n+        :param name: The name of the variable to find assignments for.\n+        :type name: str\n+        \n+        :param offset: The line offset to filter statements up to.\n+        :type offset: int\n+        \n+        :returns: This scope node and the list of assignments associated to the\n+            given name according to the scope where it has been found (locals,\n+            globals or builtin).\n+        :rtype: tuple(str, list(NodeNG))\n+        \"\"\"\n         if name in self.scope_attrs and name not in self.locals:\n             try:\n                 return self, self.getattr(name)\n             except AttributeInferenceError:\n                 return self, ()\n         return self._scope_lookup(node, name, offset)\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pyvista__pyvista-4311",
    "model_patch": "--- a/pyvista/core/filters/rectilinear_grid.py\n+++ b/pyvista/core/filters/rectilinear_grid.py\n@@ -21,6 +21,7 @@\n     progress_bar: bool = False,\n+    pass_cell_data: bool = False,\n ):\n     \"\"\"Create a tetrahedral mesh structured grid.\n \n@@ -45,6 +46\n         progress_bar : bool, default: False\n             Display a progress bar to indicate progress.\n+        \n         pass_cell_data : bool, default: False\n             Set to ``True`` to pass through the original cell data to the tetrahedra.\n \n     \"\"\"\n@@ -83,6 +85\n         if mixed is not False:\n             if isinstance(mixed, str):\n                 self.cell_data.active_scalars_name = mixed\n@@ -110,6 +113\n         alg.SetInputData(self)\n \n+        if pass_cell_data:\n+            self.cell_data.copy_to(alg.GetCellData())\n         _update_alg(alg, progress_bar, 'Converting to tetrahedra')\n         return _get_output(alg)\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pyvista__pyvista-4315",
    "model_patch": "--- a/pyvista/core/grid.py\n+++ b/pyvista/core/grid.py\n@@ -75,7 +75,7 @@\n     uinput : str, pathlib.Path, vtk.vtkRectilinearGrid, numpy.ndarray, optional\n         Filename, dataset, or array to initialize the rectilinear grid from. If a\n         filename is passed, pyvista will attempt to load it as a\n-        :class:`RectilinearGrid`. If passed a ``vtk.vtkRectilinearGrid``, it\n+        :class:`RectilinearGrid`. If passed a ``vtk.vtkRectilinearGrid``, it\n         will be wrapped. If a :class:`numpy.ndarray` is passed, this will be\n         loaded as the x range.\n \n@@ -130,7 +130,7 @@\n             elif isinstance(args[0], np.ndarray):\n-                self._from_arrays(args[0], None, None, check_duplicates)\n+                self._from_arrays(np.asarray(args[0]), None, None, check_duplicates)\n             else:\n                 raise TypeError(f'Type ({type(args[0])}) not understood by `RectilinearGrid`')\n \n@@ -144,7 +144,7 @@\n             if all([arg0_is_arr, arg1_is_arr, arg2_is_arr]):\n-                self._from_arrays(args[0], args[1], args[2], check_duplicates)\n+                self._from_arrays(np.asarray(args[0]), np.asarray(args[1]), np.asarray(args[2]), check_duplicates)\n             elif all([arg0_is_arr, arg1_is_arr]):\n-                self._from_arrays(args[0], args[1], None, check_duplicates)\n+                self._from_arrays(np.asarray(args[0]), np.asarray(args[1]), None, check_duplicates)\n             else:\n                 raise TypeError(\"Arguments not understood by `RectilinearGrid`.\")\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pydicom__pydicom-1255",
    "model_patch": "--- a/pydicom/filebase.py\n+++ b/pydicom/filebase.py\n@@ -8,7 +8,7 @@\n     Tuple, Optional, BinaryIO, Callable, Type, Union, cast, TextIO,\n     TYPE_CHECKING, Any\n )\n-from typing import NoReturn  # Import NoReturn only if Python version >= 3.6\n+from typing import NoReturn, Optional  # Import NoReturn and Optional\n \n \n try:\n@@ -185,7 +185,7 @@\n     def no_write(self, bytes_read: bytes) -> NoReturn:\n         \"\"\"Used for file-like objects where no write is available\"\"\"\n         raise IOError(\"This DicomFileLike object has no write() method\")\n \n-    def no_read(self, bytes_read: Optional[int] = None) -> NoReturn:\n+    def no_read(self, bytes_read: Optional[int] = None) -> None:\n         \"\"\"Used for file-like objects where no read is available\"\"\"\n         raise IOError(\"This DicomFileLike object has no read() method\")\n \n@@ -193,7 +193\n     def no_seek(self, offset: int, from_what: int = 0) -> NoReturn:\n         \"\"\"Used for file-like objects where no seek is available\"\"\"\n         raise IOError(\"This DicomFileLike object has no seek() method\")\n \n--- a/pydicom/jsonrep.py\n+++ b/pydicom/jsonrep.py\n@@ -7,7 +7,7 @@\n from typing import Callable, Optional, Union\n import warnings\n \n-from pydicom.tag import BaseTag\n+from pydicom.tag import BaseTag, Tag\n \n \n # Order of keys is significant!\n@@ -68,7 +68,7 @@\n             Callable[[BaseTag, str, str], object],\n             Callable[[str], object]\n         ] = None\n-    ):\n+    ) -> None:\n         \"\"\"Create a new converter instance.\n \n         Parameters\n@@ -110,7 +110\n     def get_element_values(self):\n         \"\"\"Return a the data element value or list of values.\n \n@@ -161,7 +161\n     def get_regular_element_value(self, value):\n         \"\"\"Return a the data element value created from a json \"Value\" entry.\n \n@@ -189,7 +189\n     def get_sequence_item(self, value):\n         \"\"\"Return a sequence item for the JSON dict `value`.\n \n@@ -234,7 +234\n     def get_pn_element_value(self, value):\n         \"\"\"Return PersonName value from JSON value.\n \n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pydicom__pydicom-1416",
    "model_patch": "\n--- a/pydicom/pixel_data_handlers/util.py\n+++ b/pydicom/pixel_data_handlers/util.py\n@@ -876,7 +876,7 @@\n             step = (y1 - y0) / length\n-            vals = np.around(np.arange(y0 + step, y1 + step, step))\n+            vals = np.around(np.linspace(y0 + step, y1, length))\n \n             if y0 == y1:\n                 lut.extend([y1] * length)\n@@ -898,7 +898,7 @@\n \n             lut.extend(\n-                _expand_segmented_lut(data[byte_offset:], fmt, length, lut[-1])\n+                _expand_segmented_lut(data[byte_offset:], fmt, nr_segments=length, last_value=lut[-1])\n             )\n \n         segments_read += 1\n",
    "model_name_or_path": "gpt-4o-mini"
  },
  {
    "instance_id": "pydicom__pydicom-903",
    "model_patch": "--- a/pydicom/filewriter.py\n+++ b/pydicom/filewriter.py\n@@ -502,6 +502,15 @@\n             msg = ('The value for the data element {} exceeds the size '\n                    'of 64 kByte and cannot be written in an explicit transfer '\n                    'syntax. You can save it using Implicit Little Endian '\n                    'transfer syntax, or you have to truncate the value to not '\n                    'exceed the maximum size of 64 kByte.'\n                    .format(data_element.tag))\n+            # Log a warning about the truncation\n+            import warnings\n+            warnings.warn(msg, UserWarning)\n+            # Optionally truncate the value here\n+            # For example, you can truncate to the maximum allowed length\n+            if value_length > 65534:\n+                buffer.truncate(65534)\n+                value_length = 65534\n             raise ValueError(msg)\n \n     else:\n",
    "model_name_or_path": "gpt-4o-mini"
  }
]